<%-- 
Name:
Author: tsandtm
Description: 
--%>

<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>

<%@ Property Name="Author" Type="System.String" Default="Nguyen Thanh Dai" Category="Style" Description="Author" %>
<%@ Property Name="NameSpaceProject" Type="System.String" Default="project.library" Category="Style" Description="The Namespace of project" %>

<%@ Property Name="TablePrefix" Type="System.String" Default="ts_" Category="Style" Description="Table Prfix" %>
<%@ Property Name="RemoveEndingS" Type="System.Boolean" Default="true" Category="Style" Description="If table name ends in s, class name will not if this is set to true." %>


<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;


namespace <%= NameSpaceProject %>.Models
{
    public class <%= GetClassName() %>BAL : I<%= GetClassName() %>BAL
    {
        #region Private Methods
        private <%= GetClassName() %> PopulateFromReader(IDataReader reader)
        {
            <%= GetClassName() %> item = new <%= GetClassName() %>();
             try{ 
            if(reader.Read())
			{
				<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
                
                <% if(SourceTable.Columns[i].DataType != DbType.String ) %>
                  try{ 
                      item.<%= SourceTable.Columns[i].Name %> = <%= GetReaderConversion(SourceTable.Columns[i]) %>
				<% }%>
			}
             }catch{}
            return item;
        }
        private List<<%= GetClassName() %>> LoadListFromReader(IDataReader reader)
        {
            List<<%= GetClassName() %>> items = new List<<%= GetClassName() %>>();
            try
            {
                while (reader.Read())
                {
                    <%= GetClassName() %> item = new <%= GetClassName() %>();
                    <% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
                    <% if(SourceTable.Columns[i].DataType != DbType.String ) %>
                      try{
                          item.<%= SourceTable.Columns[i].Name %> = <%= GetReaderConversion(SourceTable.Columns[i]) %>
                    <% }  %>
                    items.Add(item);
                }
            }
            catch
            {}
            finally
            {
                reader.Close();
            }
            return items;
        }

        private Guid Create(<%= GetClassName() %> item)
        {
            <%= GetClassName() %>DAL itemDAL=new <%= GetClassName() %>DAL();
            item.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = Guid.NewGuid();
            int rowsAffected = itemDAL.Create(item);
            return rowsAffected > 0 ? item.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> : Guid.Empty;
        }
        private Guid Update(<%= GetClassName() %> item)
        {
            <%= GetClassName() %>DAL itemDAL=new <%= GetClassName() %>DAL();
            return itemDAL.Update(item) ? item.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> : Guid.Empty;
        }
        #endregion

        #region public Methods

        /// <summary>
        /// Deletes an instance of <%= GetClassName() %>. Returns true on success.
        public bool Delete(Guid <%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>)
        {
            <%= GetClassName() %>DAL itemDAL=new <%= GetClassName() %>DAL();
            return itemDAL.Delete(<%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
        }

        // <summary>
        /// Saves this instance of <%= GetClassName() %>. Returns a new Guid on success.
        /// </summary>
        public Guid Save(<%= GetClassName() %> item)
        {
            if (item.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> == Guid.Empty)
                return Create(item);
            return Update(item);
        }

        /// <summary>
        /// Gets an instance of <%= GetClassName() %>.
        /// </summary>
        /// <param name="<%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>"> <%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %> </param>
        public <%= GetClassName() %> Get<%= GetClassName() %>(Guid <%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>)
        {
            <%= GetClassName() %>DAL itemDAL=new <%= GetClassName() %>DAL();
            using (IDataReader reader = itemDAL.GetOne(<%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>))
            {
                return PopulateFromReader(reader);
            }
        }

        /// <summary>
        /// Gets an IList with page of instances of <%= GetClassName() %>.
        /// </summary>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="totalPages">total pages</param>
        public List<<%= GetClassName() %>> GetPage(int pageNumber, int pageSize)
        {
            <%= GetClassName() %>DAL itemDAL=new <%= GetClassName() %>DAL();
            IDataReader reader = itemDAL.GetPage(pageNumber, pageSize);
            return LoadListFromReader(reader);
        }
        public int GetCount()
        {
            <%= GetClassName() %>DAL itemDAL=new <%= GetClassName() %>DAL();
            return itemDAL.GetCount();
        }

        /// <summary>
        /// Gets an IList with all instances of <%= GetClassName() %>.
        /// </summary>
        public List<<%= GetClassName() %>> GetAll()
        {
            <%= GetClassName() %>DAL itemDAL=new <%= GetClassName() %>DAL();
            IDataReader reader = itemDAL.GetAll();
            return LoadListFromReader(reader);
        }
        #endregion
    }
}


<script runat="template">


public string GetClassName()
{
	if ((this.RemoveEndingS)
		&&(SourceTable.Name.EndsWith("s"))
		)
	{
		return RemovePrefix(SourceTable.Name.Substring(0,SourceTable.Name.Length -1));
	}
	else
	{
		return RemovePrefix(SourceTable.Name);
	}
}

public string RemovePrefix(string TableName)
{

	return TableName.Replace(TablePrefix,"");
}

public string GetPrivateName(string ColumnName)
{
	return ColumnName.Substring(0,1).ToLower() + ColumnName.Substring(1,ColumnName.Length -1);
}

public string GetParamName(String columnName)
{
	if(columnName == "ID")
		return "id";
	
	string firstLetter = columnName.Substring(0,1).ToLower();
	string Result = firstLetter + columnName.Remove(0,1);
	
	return Result;
}

public string GetDefaultValueString(ColumnSchema column)
{
	switch(column.DataType)
	{	
		case DbType.Guid: 
			return " = Guid.Empty";
		
		case DbType.Int32 : 
			return " = -1";
		
		case DbType.AnsiString :
		case DbType.AnsiStringFixedLength :
		case DbType.String :
		case DbType.StringFixedLength :
		
			return " = string.Empty";
		
		default:
		{
			return string.Empty;
		}
		
	}
	
	
	

}


public string GetReaderConversion(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.AnsiStringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.Binary: return "Byte[]";
		case DbType.Boolean: return "Convert.ToBoolean(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Byte: return "Convert.ToByte(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Currency: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Date: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.DateTime: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Decimal: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Double: return "Convert.ToDouble(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Guid: return "new Guid(reader[\"" + column.Name + "\"].ToString());}catch (Exception) { }";
		case DbType.Int16: return "Convert.ToInt16(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Int32: return "Convert.ToInt32(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Int64: return "Convert.ToInt64(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.SByte: return "Convert.ToSByte(reader[\"" + column.Name + "\"]);}catch (Exception) { }";
		case DbType.Single: return "Convert.ToSingle(reader[\"" + column.Name + "\"]);";
		case DbType.String: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.StringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
		
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}



public string GetVBDataType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "String";
		case DbType.AnsiStringFixedLength: return "String";
		case DbType.Binary: return "Byte()";
		case DbType.Boolean: return "Boolean";
		case DbType.Byte: return "Byte";
		case DbType.Currency: return "Decimal";
		case DbType.Date: return "DateTime?";
		case DbType.DateTime: return "DateTime?";
		case DbType.Decimal: return "Decimal";
		case DbType.Double: return "Double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "Short";
		case DbType.Int32: return "Integer";
		case DbType.Int64: return "Long";
		case DbType.Object: return "Object";
		case DbType.SByte: return "SByte";
		case DbType.Single: return "Float";
		case DbType.String: return "String";
		case DbType.StringFixedLength: return "String";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "UShort";
		case DbType.UInt32: return "UInt";
		case DbType.UInt64: return "ULong";
		case DbType.VarNumeric: return "Decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
	
</script>