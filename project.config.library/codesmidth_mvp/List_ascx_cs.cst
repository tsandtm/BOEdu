<%-- 
Name:  			C# code behind quan ly danh sach (UserControl)
Author: 		To Van Chuong
Description: 	code xu ly quan ly danh sach tu table
Last Modified:	24-02-2014

--%>

<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Debug="False" Description="code xu ly quan ly danh sach tu table" %>

<%-- Optional Properties --%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Inherits" Type="System.String" Default="project.web.Controls" Category="Context" Description="Duong dan va luu file" %>

<%@ Property Name="Author" Type="System.String" Default="To Van Chuong" Category="Style" Description="Author" %>

<%@ Property Name="NameSpaceProject" Type="System.String" Default="project.library" Category="Style" Description="The Namespace of project" %>
<%@ Property Name="TablePrefix" Type="System.String" Default="tbl_" Category="Style" Description="Table Prfix" %>
<%@ Property Name="RemoveEndingS" Type="System.Boolean" Default="true" Category="Style" Description="If table name ends in s, class name will not if this is set to true." %>

<%@ Property Name="GenerateWebControls" Type="System.Boolean" Default="True" Optional="False" Category="Optional" Description="neu set true thi asp.net control se duoc tao." %>

<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
//Author:					<%= Author %>
//Created:				    <%= DateTime.Now.Year.ToString() %>-<%= DateTime.Now.Month.ToString() %>-<%= DateTime.Now.Day.ToString() %>
//Last Modified:			<%= DateTime.Now.Year.ToString() %>-<%= DateTime.Now.Month.ToString() %>-<%= DateTime.Now.Day.ToString() %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using project.web.Components;
using <%= NameSpaceProject %>.Models;
using <%= NameSpaceProject %>.Views;
using project.config.library.Utilities;
using nvn.Library.Patterns;
using nvn.Library.Utility;
using System.Data;
<% if (SourceTable.PrimaryKey == null) throw new ApplicationException("chua chon bang vao SourceTable."); %>
<% ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0]; %>
namespace <%= Inherits %>
{
    public partial class List<% =GetClassName() %>Control : System.Web.UI.UserControl, IList<% =GetClassName() %>View
    {
        #region Su kien dung de goi qua control khac
        public event EventHandler<TowParameterEventAgrs<string, Guid>> CallHandler;
        protected void OnCallHandler(string TacVu, Guid ValueGuid)
        {
            if (CallHandler != null)
            {
                CallHandler(this, new TowParameterEventAgrs<string, Guid>(TacVu, ValueGuid));
            }
        }
        #endregion

        #region MEMBER VARIABLES
        public int _PageSize;
        private int _TotalPages = 1; 
        bool _flag;//su dung de phat hien thao ta trong he thong co thanh cong hay khong
        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
                OnFristLoadEventHandler();
        }

        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            this.InitView();

            ButtonAdd.Click += new EventHandler(ButtonAdd_Click);
            ButtonDelete.Click += new EventHandler(ButtonDelete_Click);
            mojoCutePager1.Command += new CommandEventHandler(mojoCutePager1_Command);
            DropDownListPageNumber.SelectedIndexChanged += new EventHandler(DropDownListPageNumber_SelectedIndexChanged);
            Repeater<% =GetClassName() %>.ItemCommand += new RepeaterCommandEventHandler(Repeater<% =GetClassName() %>_ItemCommand);
        }

        #region Load du lieu lan dau tien
        private void KhoiTaoGiaTriBanDau()
        {
        }
        public void LoadData(string TacVu, object Value)
        {
            if (TacVu.Equals(ConstantVariable.TACVU_REFRESH))
            {
                OnLoadListData_Event();
            }

            UpdatePanelShow<% =GetClassName() %>_on.Update();
        }
        #endregion

        #region All event
        void ButtonDelete_Click(object sender, EventArgs e)
        {
            int count = Repeater<% =GetClassName() %>.Items.Count;
            int countItemSuccess = 0;
            for (int i = 0; i < count; i++)
            {
                RepeaterItem item = (RepeaterItem)Repeater<% =GetClassName() %>.Items[i];
                CheckBox CheckBoxSelect = (CheckBox)item.FindControl("CheckBoxSelect");
                Literal Literal<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = (Literal)item.FindControl("Literal<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>");
                if (CheckBoxSelect.Checked)
                {
                    OnDelete_Event(new Guid(Literal<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>.Text));
                    if (_flag)
                        countItemSuccess++;
                }
            }
            SuccessMessage = "Thao tác thành công " + countItemSuccess + " record!";
            OnLoadListData_Event();
        }
        void ButtonAdd_Click(object sender, EventArgs e)
        {
            OnCallHandler(ConstantVariable.TACVU_ADD, Guid.Empty);
        }
        void mojoCutePager1_Command(object sender, CommandEventArgs e)
        {
            PageNumber = Convert.ToInt32(e.CommandArgument);
            mojoCutePager1.CurrentIndex = PageNumber;
            OnLoadListDataComment_Event();
        }
        void DropDownListPageNumber_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                mojoCutePager1.CurrentIndex = 1;
                PageNumber = 1;
                _PageSize = Convert.ToInt32(DropDownListPageNumber.SelectedValue.ToString());
                OnLoadListData_Event();
            }
            catch (Exception)
            {
                Response.Redirect(Request.RawUrl);
            }
        }
        void Repeater<% =GetClassName() %>_ItemCommand(object source, RepeaterCommandEventArgs e)
        {
            if (e.CommandName.Equals(ConstantVariable.TACVU_EDIT))
            {
                try
                {
                    OnCallHandler(ConstantVariable.TACVU_EDIT, new Guid(e.CommandArgument.ToString()));
                    return;
                }
                catch (Exception ex)
                {
                    ErrorMessage = "Lỗi chuyển đổi dữ liệu vui lòng liên hệ quản trị để khắc phục!";
                }
            }
        }
        #endregion

        #region Phan trang
        public int PageNumber
        {
           get
            {

                if (CookieHelper1.GetCookieValue("SelectPage<% =GetClassName() %>") != string.Empty)
                {
                    try { return Convert.ToInt32(CookieHelper1.GetCookieValue("SelectPage<% =GetClassName() %>")); }
                    catch { return 1; } // add
                }
                return 1;
            }
            set
            {
                CookieHelper1.SetCookie("SelectPage<% =GetClassName() %>", value.ToString());

            }
        }
        public int PageSize
        {
            get
            {
                try
                {
                    return Convert.ToInt32(DropDownListPageNumber.SelectedValue);
                }
                catch { return 15; } // add
            }
            set
            {
                this._PageSize = value;
            }
        }
        public int TotalPages
        {
            get
            {
                if (ViewState["TotalPages"] != null)
                {
                    try { return Convert.ToInt32(ViewState["TotalPages"].ToString()); }
                    catch { return 1; } // add
                }
                return 1;
            }
            set
            {
                ViewState["TotalPages"] = value;
            }
        }
        #endregion

        #region Emplement
        
        public bool flag
        {
            set
            {
                _flag = value;
            }
        }
        public string ErrorMessage
        {
            set
            {
                if (value != null)
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "Error", ShowMessage.Error( value), false);
            }
        }
        public string SuccessMessage
        {
            set
            {
                if (value != null)
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "Success", ShowMessage.Success(value), false);
            }
        }

        public string WaningMessage
        {
            set
            {
                if (value != null)
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "Waning", ShowMessage.Waning(value), false);
            }
        }
        public List<<% =GetClassName() %>> list<% =GetClassName() %>
        {
            set
            {
                Repeater<% =GetClassName() %>.DataSource = value;
                Repeater<% =GetClassName() %>.DataBind();
                if (this.TotalPages > 1)
                {
                    mojoCutePager1.CurrentIndex = PageNumber;
                    mojoCutePager1.Visible = true;
                    mojoCutePager1.ShowFirstLast = true;
                    mojoCutePager1.PageSize = this._PageSize;
                    mojoCutePager1.PageCount = this.TotalPages;
                }
                else
                    mojoCutePager1.Visible = false;
            }
        }
        public List<TowTypeParameters<string, string>> PapeNumbers
        {
            set
            {
                DropDownListPageNumber.Items.Clear();
                DropDownListPageNumber.DataSource = value;
                DropDownListPageNumber.DataTextField = "T";
                DropDownListPageNumber.DataValueField = "V";
                DropDownListPageNumber.DataBind();
            }
        }

        public event EventHandler<EventArgs> LoadListData_Event;
        private void OnLoadListData_Event()
        {
            if (LoadListData_Event != null)
                LoadListData_Event(this, new EventArgs());
        }

        public event EventHandler<EventArgs> LoadListDataComment_Event;
         private void OnLoadListDataComment_Event()
        {
            if (LoadListDataComment_Event != null)
                LoadListDataComment_Event(this, new EventArgs());
        }
        
        public event EventHandler<OneParameterEventAgrs<Guid>> Delete_Event;
        private void OnDelete_Event(Guid parameterValue)
        {
            if (Delete_Event != null)
                Delete_Event(this, new OneParameterEventAgrs<Guid>(parameterValue));
        }

        public event EventHandler<OneParameterEventAgrs<int>> SelectedIndexChanged_EventArgs;

        public event EventHandler<EventArgs> FristLoadEventHandler;
        private void OnFristLoadEventHandler()
        {
            if (FristLoadEventHandler != null)
                FristLoadEventHandler(this, new EventArgs());
        }
        #endregion
    }
}

              
<script runat="template">


public string GetClassName()
{
	
	if ((this.RemoveEndingS)
		&&(SourceTable.Name.EndsWith("s"))
		)
	{
		return RemovePrefix(SourceTable.Name.Substring(0,SourceTable.Name.Length -1));
	}
	else
	{
		return RemovePrefix(SourceTable.Name);
	}
}

public string RemovePrefix(string TableName)
{

	return TableName.Replace(TablePrefix,"");
}

public string GetPrivateName(string ColumnName)
{
	

	return ColumnName.Substring(0,1).ToLower() + ColumnName.Substring(1,ColumnName.Length -1);
}

public string GetParamName(String columnName)
{
	if(columnName == "ID")
		return "id";
	
	string firstLetter = columnName.Substring(0,1).ToLower();
	string Result = firstLetter + columnName.Remove(0,1);
	
	return Result;
}

public string GetDefaultValueString(ColumnSchema column)
{
	switch(column.DataType)
	{	
		case DbType.Guid: 
			return " = Guid.Empty";
		
		case DbType.Int32 : 
			return " = -1";
		
		case DbType.AnsiString :
		case DbType.AnsiStringFixedLength :
		case DbType.String :
		case DbType.StringFixedLength :
		
			return " = string.Empty";
		
		default:
		{
			return string.Empty;
		}
		
	}
	
	
	

}

public bool IsComparible(ColumnSchema column)
{
	switch(GetSqlDbType(column))
	{
		case "Char" :
		case "NChar" :
		case "VarChar" :
		case "NVarChar" :
		case "Text" :
		case "NText" :
		case "Int" :
		case "DateTime" :
		return true;
		
		break;
	
		default:
			return false;
		
	}
	
	
	

}

public string GetReaderConversion(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.AnsiStringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.Binary: return "Byte[]";
		case DbType.Boolean: return "Convert.ToBoolean(reader[\"" + column.Name + "\"]);";
		case DbType.Byte: return "Convert.ToByte(reader[\"" + column.Name + "\"]);";
		case DbType.Currency: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);";
		case DbType.Date: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);";
		case DbType.DateTime: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);";
		case DbType.Decimal: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);";
		case DbType.Double: return "Convert.ToDouble(reader[\"" + column.Name + "\"]);";
		case DbType.Guid: return "new Guid(reader[\"" + column.Name + "\"].ToString());";
		case DbType.Int16: return "Convert.ToInt16(reader[\"" + column.Name + "\"]);";
		case DbType.Int32: return "Convert.ToInt32(reader[\"" + column.Name + "\"]);";
		case DbType.Int64: return "Convert.ToInt64(reader[\"" + column.Name + "\"]);";
		case DbType.SByte: return "Convert.ToSByte(reader[\"" + column.Name + "\"]);";
		case DbType.Single: return "Convert.ToSingle(reader[\"" + column.Name + "\"]);";
		case DbType.String: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.StringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
		
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}



public string GetVBDataType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "String";
		case DbType.AnsiStringFixedLength: return "String";
		case DbType.Binary: return "Byte()";
		case DbType.Boolean: return "Boolean";
		case DbType.Byte: return "Byte";
		case DbType.Currency: return "Decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "Decimal";
		case DbType.Double: return "Double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "Short";
		case DbType.Int32: return "Integer";
		case DbType.Int64: return "Long";
		case DbType.Object: return "Object";
		case DbType.SByte: return "SByte";
		case DbType.Single: return "Float";
		case DbType.String: return "String";
		case DbType.StringFixedLength: return "String";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "UShort";
		case DbType.UInt32: return "UInt";
		case DbType.UInt64: return "ULong";
		case DbType.VarNumeric: return "Decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
	
</script>