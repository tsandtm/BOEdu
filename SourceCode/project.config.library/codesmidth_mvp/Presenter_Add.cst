<%-- 
Name:
Author: tsandtm
Description: 
--%>

<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Debug="False" CompilerVersion="v3.5" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>

<%@ Property Name="IViewName" Type="System.String" Default="IView" Category="Name" Description="IViewName" %>
<%@ Property Name="PresenterName" Type="System.String" Default="Presenter" Category="Name" Description="IPresenterName" %>

<%@ Property Name="Author" Type="System.String" Default="Nguyen Thanh Dai" Category="Style" Description="Author" %>
<%@ Property Name="NameSpaceProject" Type="System.String" Default="project.library" Category="Style" Description="The Namespace of project" %>

<%@ Property Name="TablePrefix" Type="System.String" Default="ts_" Category="Style" Description="Table Prfix" %>
<%@ Property Name="RemoveEndingS" Type="System.Boolean" Default="true" Category="Style" Description="If table name ends in s, class name will not if this is set to true." %>


<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using nvn.Library.Patterns.MVP;
using nvn.Library.Patterns;
using <%= NameSpaceProject %>.Views;
using <%= NameSpaceProject %>.Models;
using project.config.library.Utilities;

namespace <%= NameSpaceProject %>.Presenters
{
    public class <%= PresenterName %> : BasePresenter<<%= IViewName %>>
    {
        public <%= PresenterName %>(<%= IViewName %> view)
            : base(view)
        {
            this.view.LoadData_Event += new EventHandler<TowParameterEventAgrs<string, Guid>>(view_LoadData_Event);
            this.view.Save_Event += new EventHandler<OneParameterEventAgrs<<%= GetClassName() %>>>(view_Save_Event);
        }

        #region Event
        void view_Save_Event(object sender, OneParameterEventAgrs<<%= GetClassName() %>> e)
        {
            I<%= GetClassName() %>BAL itemBAL = new <%= GetClassName() %>BAL();
            <%= GetClassName() %> item = e.myType;

            //Save data
			item.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = itemBAL.Save(item);
            if (item.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %> != Guid.Empty)
            {
                view.SuccessMessage = "Thao tác thành công!";
                BindingData(item.<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>);
            }
            else
                view.ErrorMessage = "Thao tác thất bại!";
        }
        void view_LoadData_Event(object sender, TowParameterEventAgrs<string, Guid> e)
        {
            BindingData(e.V);
        }
        #endregion

        #region private method
        private void BindingData(Guid <%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>)
        {
            if (<%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %> != Guid.Empty)
            {
                I<%= GetClassName() %>BAL itemBAL = new <%= GetClassName() %>BAL();
                view.item<%= GetClassName() %> = itemBAL.Get<%= GetClassName() %>(<%= GetPrivateName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
            }
            else
                view.item<%= GetClassName() %> = new <%= GetClassName() %>();
        }
        #endregion
    }
}



<script runat="template">


public string GetClassName()
{
	if ((this.RemoveEndingS)
		&&(SourceTable.Name.EndsWith("s"))
		)
	{
		return RemovePrefix(SourceTable.Name.Substring(0,SourceTable.Name.Length -1));
	}
	else
	{
		return RemovePrefix(SourceTable.Name);
	}
}

public string RemovePrefix(string TableName)
{

	return TableName.Replace(TablePrefix,"");
}

public string GetPrivateName(string ColumnName)
{
	return ColumnName.Substring(0,1).ToLower() + ColumnName.Substring(1,ColumnName.Length -1);
}

public string GetParamName(String columnName)
{
	if(columnName == "ID")
		return "id";
	
	string firstLetter = columnName.Substring(0,1).ToLower();
	string Result = firstLetter + columnName.Remove(0,1);
	
	return Result;
}

public string GetDefaultValueString(ColumnSchema column)
{
	switch(column.DataType)
	{	
		case DbType.Guid: 
			return " = Guid.Empty";
		
		case DbType.Int32 : 
			return " = -1";
		
		case DbType.AnsiString :
		case DbType.AnsiStringFixedLength :
		case DbType.String :
		case DbType.StringFixedLength :
		
			return " = string.Empty";
		
		default:
		{
			return string.Empty;
		}
		
	}
	
	
	

}


public string GetReaderConversion(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.AnsiStringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.Binary: return "Byte[]";
		case DbType.Boolean: return "Convert.ToBoolean(reader[\"" + column.Name + "\"]);";
		case DbType.Byte: return "Convert.ToByte(reader[\"" + column.Name + "\"]);";
		case DbType.Currency: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);";
		case DbType.Date: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);";
		case DbType.DateTime: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);";
		case DbType.Decimal: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);";
		case DbType.Double: return "Convert.ToDouble(reader[\"" + column.Name + "\"]);";
		case DbType.Guid: return "new Guid(reader[\"" + column.Name + "\"].ToString());";
		case DbType.Int16: return "Convert.ToInt16(reader[\"" + column.Name + "\"]);";
		case DbType.Int32: return "Convert.ToInt32(reader[\"" + column.Name + "\"]);";
		case DbType.Int64: return "Convert.ToInt64(reader[\"" + column.Name + "\"]);";
		case DbType.SByte: return "Convert.ToSByte(reader[\"" + column.Name + "\"]);";
		case DbType.Single: return "Convert.ToSingle(reader[\"" + column.Name + "\"]);";
		case DbType.String: return "reader[\"" + column.Name + "\"].ToString();";
		case DbType.StringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
		
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}



public string GetVBDataType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "String";
		case DbType.AnsiStringFixedLength: return "String";
		case DbType.Binary: return "Byte()";
		case DbType.Boolean: return "Boolean";
		case DbType.Byte: return "Byte";
		case DbType.Currency: return "Decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "Decimal";
		case DbType.Double: return "Double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "Short";
		case DbType.Int32: return "Integer";
		case DbType.Int64: return "Long";
		case DbType.Object: return "Object";
		case DbType.SByte: return "SByte";
		case DbType.Single: return "Float";
		case DbType.String: return "String";
		case DbType.StringFixedLength: return "String";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "UShort";
		case DbType.UInt32: return "UInt";
		case DbType.UInt64: return "ULong";
		case DbType.VarNumeric: return "Decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
	
</script>